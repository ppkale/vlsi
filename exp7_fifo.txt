-- VHDL Code for FIFO (8x3)
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_logic_arith.ALL;
use IEEE.STD_logic_unsigned.ALL;
use IEEE.NUMERIC_STD.ALL;

entity fifo is
generic (depth : integer := 8);  --depth of fifo
port (    clk : in std_logic;
          reset : in std_logic;
          enr : in std_logic;   --enable read,should be '0' when not in use.
          enw : in std_logic;    --enable write,should be '0' when not in use.
          data_in : in std_logic_vector (2 downto 0);     --input data
          data_out : out std_logic_vector(2 downto 0);    --output data
          fifo_empty : out std_logic;     --set as '1' when the queue is empty
          fifo_full : out std_logic     --set as '1' when the queue is full
         );
end fifo;

architecture Behavioral of fifo is

type memory_type is array (0 to depth-1) of std_logic_vector(2 downto 0);
signal memory : memory_type :=(others => (others => '0'));   --memory for queue.
signal readptr,writeptr : integer := 0;  --read and write pointers.
signal empty,full : std_logic := '0';

signal dataout:std_logic_vector(2 downto 0);
begin
fifo_empty <= empty;
fifo_full <= full;

p12:process(clk,reset)
--this is the number of elements stored in fifo at a time.
--this variable is used to decide whether the fifo is empty or full.
variable num_elem : integer := 0;  
begin
if(reset = '1') then
    dataout <= (others => '0');
    empty <= '0';
    full <= '0';
    readptr <= 0;
    writeptr <= 0;
    num_elem := 0;
elsif(rising_edge(clk)) then
    if(enr = '1' and empty = '0') then  --read
        dataout <= memory(readptr);
        readptr <= readptr + 1;      
        num_elem := num_elem-1;
    end if;
    if(enw ='1' and full = '0') then    --write
        memory(writeptr) <= data_in;
        writeptr <= writeptr + 1;  
        num_elem := num_elem+1;
    end if;
    --rolling over of the indices.
    if(readptr = depth-1) then      --resetting read pointer.
        readptr <= 0;
    end if;
    if(writeptr = depth-1) then        --resetting write pointer.
        writeptr <= 0;
    end if; 
    --setting empty and full flags.
    if(num_elem = 0) then
        empty <= '1';
    else
        empty <= '0';
    end if;
    if(num_elem = depth) then
        full <= '1';
    else
        full <= '0';
    end if;
end if; 
end process;
data_out<=dataout;

end Behavioral;




----------------------------------------------------------------------------------
-- VHDL Test Bench
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_arith.ALL;

ENTITY fifo_tb IS
END fifo_tb;

ARCHITECTURE behavior OF fifo_tb IS 
   --Inputs and outputs
   signal Clk,reset,enr,enw,empty,full : std_logic := '0';
   signal data_in,data_out : std_logic_vector(2 downto 0) := (others => '0');
    --temporary signals
    signal i : integer := 0;
   -- Clock period definitions
   constant Clk_period : time := 10 ns;
    constant depth : integer := 8;  --specify depth of fifo here.

BEGIN

    -- Instantiate the Unit Under Test (UUT)
   uut: entity work.fifo generic map(depth => depth) PORT MAP (clk,reset,enr,enw,data_in,data_out,empty,full);

   -- Clock process definitions
   Clk_process :process
   begin
        Clk <= '0';
        wait for Clk_period/2;
        Clk <= '1';
        wait for Clk_period/2;
   end process;

   -- Stimulus process
   stim_proc: process
   begin        
        reset <= '1';  --apply reset for one clock cycle.
        wait for clk_period;
        reset <= '0';
        wait for clk_period*3;  --wait for 3 clock periods(simply)
        enw <= '1';     enr <= '0';         --write 8 values to fifo.
      for i in 1 to depth loop  
            Data_In <= conv_std_logic_vector(i,3);
            wait for clk_period;
      end loop; 
        enw <= '0';     enr <= '1';         --read 8 values from fifo.
      wait for clk_period*depth;
                 
        wait;
   end process;
	end behavior;






---------------------------------------------------------------------------------
-- Implementation code with slow clock  on Spartan 6
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_logic_arith.ALL;
use IEEE.STD_logic_unsigned.ALL;
use IEEE.NUMERIC_STD.ALL;

entity fifo is
generic (depth : integer := 8);  --depth of fifo
port (    clk : in std_logic;
          reset : in std_logic;
          enr : in std_logic;   --enable read,should be '0' when not in use.
          enw : in std_logic;    --enable write,should be '0' when not in use.
          data_in : in std_logic_vector (2 downto 0);     --input data
          data_out : out std_logic_vector(2 downto 0);    --output data
          fifo_empty : out std_logic;     --set as '1' when the queue is empty
          fifo_full : out std_logic     --set as '1' when the queue is full
         );
end fifo;

architecture Behavioral of fifo is

type memory_type is array (0 to depth-1) of std_logic_vector(2 downto 0);
signal memory : memory_type :=(others => (others => '0'));   --memory for queue.
signal readptr,writeptr : integer := 0;  --read and write pointers.
signal empty,full : std_logic := '0';

signal temp:std_logic_vector(27 downto 0);  
signal sclk:std_logic;
signal dataout:std_logic_vector(2 downto 0);

begin
fifo_empty <= empty;
fifo_full <= full;

p11: process(clk,reset)
	begin
	if(reset='1')then temp<=(others=>'0');
		elsif(clk'event and clk='1') then
		temp<= temp + 1;
	   end if;
	end process;
	sclk<=temp(27);

p12:process(sclk,reset)
--this is the number of elements stored in fifo at a time.
--this variable is used to decide whether the fifo is empty or full.
variable num_elem : integer := 0;  
begin
if(reset = '1') then
    dataout <= (others => '0');
    empty <= '0';
    full <= '0';
    readptr <= 0;
    writeptr <= 0;
    num_elem := 0;
elsif(rising_edge(sclk)) then
    if(enr = '1' and empty = '0') then  --read
        dataout <= memory(readptr);
        readptr <= readptr + 1;      
        num_elem := num_elem-1;
    end if;
    if(enw ='1' and full = '0') then    --write
        memory(writeptr) <= data_in;
        writeptr <= writeptr + 1;  
        num_elem := num_elem+1;
     end if;
    --rolling over of the indices.
    if(readptr = depth-1) then      --resetting read pointer.
        readptr <= 0;
    end if;
    if(writeptr = depth-1) then        --resetting write pointer.
        writeptr <= 0;
    end if; 
    --setting empty and full flags.
    if(num_elem = 0) then
        empty <= '1';
    else
        empty <= '0';
    end if;
    if(num_elem = depth) then
        full <= '1';
    else
        full <= '0';
    end if;
end if; 
end process;
data_out<=dataout;
end Behavioral;




-----------------------------------------------------------------------------------------
-- Implementation Constraint File
NET "reset" LOC = "E4"; 
NET "CLK" LOC ="L15"; 
NET "enr" LOC ="T5"; 
NET "enw" LOC ="R5"; 
NET "data_in<0>" LOC ="A10"; 
NET "data_in<1>" LOC ="D14";
NET "data_in<2>" LOC ="C14";

NET "data_out<0>" LOC = "U18"; # Bank = 1, Pin name = IO_L52N_M1DQ15,  Sch name = LD0
NET "data_out<1>" LOC = "M14"; # Bank = 1, Pin name = IO_L53P,  Sch name = LD1
NET "data_out<2>" LOC = "N14"; # Bank = 1, Pin name = IO_L53N_VREF,  Sch name = LD2

NET "fifo_empty" LOC = "P16"; # Bank = 1, Pin name = IO_L61P,  Sch name = LD3
NET "fifo_full" LOC = "D4";


